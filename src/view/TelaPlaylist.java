/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import dao.MusicaDAO;
import dao.PlaylistDAO;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Playlist;
import model.Musica;
import model.Usuario;
/**
 *
 * @author dante
 */
public class TelaPlaylist extends javax.swing.JFrame {

    private Usuario usuario;
    private List<Playlist> playlists;
    private DefaultTableModel modeloMusicas;
    /**
     * Creates new form TelaPlaylist
     */
    public TelaPlaylist(Usuario usuarioLogado) {
    this.usuario = usuarioLogado;
        initComponents();
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(450, 350);
        
        modeloMusicas = new DefaultTableModel(new String[]{"Nome", "Artista", "Gênero"}, 0);
        tabelaMusicas.setModel(modeloMusicas);

        atualizarPlaylists();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblPlaylists = new javax.swing.JLabel();
        lblMusicas = new javax.swing.JLabel();
        cmbPlaylists = new javax.swing.JComboBox<>();
        btnCriarPlaylist = new javax.swing.JButton();
        btnAdicionarMusica = new javax.swing.JButton();
        btnRemoverMusica = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaMusicas = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(229, 229, 229));
        setResizable(false);
        setSize(new java.awt.Dimension(400, 300));
        getContentPane().setLayout(null);

        lblPlaylists.setText("Playlists:");
        getContentPane().add(lblPlaylists);
        lblPlaylists.setBounds(20, 40, 50, 16);

        lblMusicas.setText("Músicas na Playlist:");
        getContentPane().add(lblMusicas);
        lblMusicas.setBounds(20, 80, 110, 16);

        cmbPlaylists.setToolTipText("");
        cmbPlaylists.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPlaylistsActionPerformed(evt);
            }
        });
        getContentPane().add(cmbPlaylists);
        cmbPlaylists.setBounds(90, 40, 290, 22);

        btnCriarPlaylist.setText("Criar Playlist");
        btnCriarPlaylist.setToolTipText("Criar Playlist");
        btnCriarPlaylist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCriarPlaylistActionPerformed(evt);
            }
        });
        getContentPane().add(btnCriarPlaylist);
        btnCriarPlaylist.setBounds(20, 260, 110, 23);

        btnAdicionarMusica.setText("Add Música");
        btnAdicionarMusica.setToolTipText("Adicionar Música a Playlist");
        btnAdicionarMusica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarMusicaActionPerformed(evt);
            }
        });
        getContentPane().add(btnAdicionarMusica);
        btnAdicionarMusica.setBounds(140, 260, 120, 23);

        btnRemoverMusica.setText("Remover Música");
        btnRemoverMusica.setToolTipText("Remover Música da Playlist");
        btnRemoverMusica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverMusicaActionPerformed(evt);
            }
        });
        getContentPane().add(btnRemoverMusica);
        btnRemoverMusica.setBounds(270, 260, 110, 23);

        tabelaMusicas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nome", "Artista", "Gênero"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaMusicas.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tabelaMusicas);
        if (tabelaMusicas.getColumnModel().getColumnCount() > 0) {
            tabelaMusicas.getColumnModel().getColumn(0).setResizable(false);
            tabelaMusicas.getColumnModel().getColumn(1).setResizable(false);
            tabelaMusicas.getColumnModel().getColumn(2).setResizable(false);
        }

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(20, 110, 360, 130);

        jButton1.setText("Voltar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(0, 0, 70, 20);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbPlaylistsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPlaylistsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbPlaylistsActionPerformed

    private void btnAdicionarMusicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarMusicaActionPerformed
        Playlist playlistSelecionada = (Playlist) cmbPlaylists.getSelectedItem();
        if (playlistSelecionada != null) {
            String musicaNome = JOptionPane.showInputDialog("Digite o nome da música para adicionar:");
            if (musicaNome != null && !musicaNome.trim().isEmpty()) {
                try {
                    MusicaDAO mdao = new MusicaDAO();
                    List<Musica> musicas = mdao.buscar(musicaNome, "nome");
                    if (!musicas.isEmpty()) {
                        Musica musicaSelecionada = musicas.get(0);
                        System.out.println("ID da música selecionada: " + musicaSelecionada.getId()); 
                        PlaylistDAO pdao = new PlaylistDAO();
                        pdao.adicionarMusica(playlistSelecionada.getId(), musicaSelecionada.getId());
                        atualizarMusicas();
                        JOptionPane.showMessageDialog(null, "Música adicionada com sucesso!");
                    } else {
                        JOptionPane.showMessageDialog(null, "Música não encontrada!");
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_btnAdicionarMusicaActionPerformed

    private void btnCriarPlaylistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCriarPlaylistActionPerformed
        String nomePlaylist = JOptionPane.showInputDialog("Digite o nome da playlist:");
                if (nomePlaylist != null && !nomePlaylist.trim().isEmpty()) {
                    try {
                        PlaylistDAO pdao = new PlaylistDAO();
                        Playlist novaPlaylist = new Playlist(usuario.getId(), nomePlaylist);
                        pdao.cadastrar(novaPlaylist);
                        atualizarPlaylists();
                        JOptionPane.showMessageDialog(null, "Playlist criada com sucesso!");
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
    }//GEN-LAST:event_btnCriarPlaylistActionPerformed

    private void btnRemoverMusicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverMusicaActionPerformed
        // TODO add your handling code here:public void actionPerformed(ActionEvent e) {
                Playlist playlistSelecionada = (Playlist) cmbPlaylists.getSelectedItem();
                if (playlistSelecionada != null) {
                    String musicaNome = JOptionPane.showInputDialog("Digite o nome da música para remover:");
                    if (musicaNome != null && !musicaNome.trim().isEmpty()) {
                        try {
                            MusicaDAO mdao = new MusicaDAO();
                            List<Musica> musicas = mdao.buscar(musicaNome, "nome");
                            if (!musicas.isEmpty()) {
                                Musica musicaSelecionada = musicas.get(0);
                                PlaylistDAO pdao = new PlaylistDAO();
                                pdao.removerMusica(playlistSelecionada.getId(), musicaSelecionada.getId());
                                atualizarMusicas();
                                JOptionPane.showMessageDialog(null, "Música removida com sucesso!");
                            } else {
                                JOptionPane.showMessageDialog(null, "Música não encontrada!");
                            }
                        } catch (Exception ex) {
                            ex.printStackTrace();
                        }
                    
                
            
        }

        atualizarPlaylists();
    }
    }//GEN-LAST:event_btnRemoverMusicaActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        new TelaPrincipal(usuario).setVisible(true);
            this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    private void atualizarPlaylists() {
    try {
        PlaylistDAO pdao = new PlaylistDAO();
        playlists = pdao.buscarPorUsuario(usuario.getId());

        DefaultComboBoxModel<Playlist> model = new DefaultComboBoxModel<>();
        for (Playlist p : playlists) {
            model.addElement(p);
        }
        cmbPlaylists.setModel(model);

    } catch (Exception ex) {
        ex.printStackTrace();
    }
}

    private Playlist getPlaylistSelecionada() {
        int index = cmbPlaylists.getSelectedIndex();
        if (index >= 0 && index < playlists.size()) {
            return playlists.get(index);
        }
        return null;
    }
    
    private void initModel() {
        modeloMusicas = new DefaultTableModel();
        modeloMusicas.addColumn("Nome");
        modeloMusicas.addColumn("Artista");
        modeloMusicas.addColumn("Gênero");
        tabelaMusicas.setModel(modeloMusicas);
    }

    private void atualizarMusicas() {
        try {
            Playlist playlistSelecionada = getPlaylistSelecionada();
            if (playlistSelecionada != null) {
                PlaylistDAO pdao = new PlaylistDAO();
                List<Musica> musicas = pdao.buscarMusicas(playlistSelecionada.getId());
                modeloMusicas.setRowCount(0);
                for (Musica m : musicas) {
                    modeloMusicas.addRow(new Object[]{m.getNome(), m.getArtista(), m.getGenero()});
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionarMusica;
    private javax.swing.JButton btnCriarPlaylist;
    private javax.swing.JButton btnRemoverMusica;
    private javax.swing.JComboBox<Playlist> cmbPlaylists;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblMusicas;
    private javax.swing.JLabel lblPlaylists;
    private javax.swing.JTable tabelaMusicas;
    // End of variables declaration//GEN-END:variables
}
